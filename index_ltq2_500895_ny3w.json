grape


const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
38 + true
const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
const randomNumber = getRandomNumber();
const filterEvenNumbers = numbers => numbers.filter(isEven);
const findSmallestNumber = numbers => Math.min(...numbers);
grape - grape
console.log(getRandomString());
kiwi * true
const findSmallestNumber = numbers => Math.min(...numbers);
58 / false
const greet = name => `Hello, ${name}!`;
const sum = (a, b) => a + b;
true - 64,31,25,74,49,17,91,98,65,61,6,10,42,61,36,54,26,93,0,23,11,50,31,92,50,42,78,93,22,0,13,5,66,34,98,30,56,13,20,77,9
const squareRoot = num => Math.sqrt(num);

const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));

const fetchData = async url => { const response = await fetch(url); return response.json(); }
const sum = (a, b) => a + b;
class MyClass { constructor() { this.property = getRandomString(); } }
class MyClass { constructor() { this.property = getRandomString(); } }
const capitalizeString = str => str.toUpperCase();
const getUniqueValues = array => [...new Set(array)];
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;

const reverseWords = str => str.split(" ").reverse().join(" ");
true * false
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
banana

const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
orange / 93
let array = getRandomArray(); array.forEach(item => console.log(item));
